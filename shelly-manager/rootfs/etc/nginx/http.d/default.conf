server {
    listen 8080;
    server_name _;

    root /var/www/html;
    index index.html;

    # --- Security headers ---
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;

    # --- Ingress slug normalization ---
    # Exact /shelly-manager -> /
    rewrite ^/shelly-manager$ / last;
    # Any /shelly-manager/... -> /...
    rewrite ^/shelly-manager/(.*)$ /$1 last;

    # --- Healthcheck ---
    location = /health {
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Compute an ingress-aware API base once, for use in sub_filters
    # Result example: /api/hassio_ingress/<token>/api
    set $api_base "$http_x_ingress_path/api";

    # --- API proxy (ingress-safe) ---
    location /api/ {
        proxy_pass http://localhost:8000/api/;

        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-Port  $server_port;

        proxy_http_version 1.1;
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_connect_timeout 60s;
        proxy_send_timeout    60s;
        proxy_read_timeout    60s;

        # Keep absolute redirects working under ingress
        proxy_redirect ~^/(.*)$ $http_x_ingress_path/$1;
    }

    # --- Static assets (versioned) ---
    location /assets/ {
        alias /var/www/html/assets/;

        # Replace hard-coded API bases inside JS bundles served from /assets
        sub_filter_once off;
        sub_filter_types application/javascript;
        sub_filter 'http://localhost:8000'   '$api_base';
        sub_filter 'https://localhost:8000'  '$api_base';
        sub_filter 'http://127.0.0.1:8000'   '$api_base';
        sub_filter 'https://127.0.0.1:8000'  '$api_base';

        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";

        gzip on;
        gzip_vary on;
        gzip_types
            text/css
            text/javascript
            text/xml
            text/plain
            application/javascript
            application/xml+rss
            application/json;

        try_files $uri =404;
    }

    # --- Generic static (incl. top-level *.js like /index-*.js) ---
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Apply the same JS rewrite here too (covers /index-*.js outside /assets)
        sub_filter_once off;
        sub_filter_types application/javascript;
        sub_filter 'http://localhost:8000'   '$api_base';
        sub_filter 'https://localhost:8000'  '$api_base';
        sub_filter 'http://127.0.0.1:8000'   '$api_base';
        sub_filter 'https://127.0.0.1:8000'  '$api_base';

        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";

        gzip on;
        gzip_vary on;
        gzip_types
            text/css
            text/javascript
            application/javascript
            application/json
            image/svg+xml;
    }

    # --- SPA routing ---
    location / {
        try_files $uri $uri/ @fallback;

        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    location @fallback {
        rewrite ^.*$ /index.html last;
    }

    # --- index.html tweaks ---
    location = /index.html {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";

        # Keep absolute asset refs relative (works without rebuilding the web)
        sub_filter_once off;
        sub_filter_types text/html;
        sub_filter 'href="/' 'href="./';
        sub_filter 'src="/'  'src="./';
        sub_filter "href='/" "href='./";
        sub_filter "src='/"  "src='./";

        # OPTIONAL: inject <base> + tiny script to trim ingress prefix+slug
        sub_filter '<head>' '<head><base href="$http_x_ingress_path/"><script>(function(){try{var p=location.pathname;var parts=p.split("/");if(parts.length>=4&&parts[1]==="api"&&parts[2]==="hassio_ingress"){var ingress="/"+parts.slice(1,4).join("/");var base=ingress+"/shelly-manager";if(p.indexOf(base)===0){var newPath=p.slice(base.length);if(!newPath||newPath[0]!="/"){newPath="/"+(newPath||"");}var nu=newPath+location.search+location.hash;if(nu!==location.pathname+location.search+location.hash){history.replaceState(null,"",nu);}}}}catch(e){}})();</script>';
    }
}
